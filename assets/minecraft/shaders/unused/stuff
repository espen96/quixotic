/*

int inControl(vec2 screenCoord, float screenWidth) {
    if (screenCoord.y < 1.0) {
        float index = floor(screenWidth / 2.0) + THRESH / 2.0;
        index = (screenCoord.x - index) / 2.0;
        if (fract(index) < THRESH && index < NUMCONTROLS && index >= 0) {
            return int(index);
        }
    }
    return -1;
}

vec4 getNotControl(sampler2D inSampler, vec2 coords, bool inctrl) {
    if (inctrl) {
        return (texture(inSampler, coords - vec2(oneTexel.x, 0.0)) + texture(inSampler, coords + vec2(oneTexel.x, 0.0)) + texture(inSampler, coords + vec2(0.0, oneTexel.y))) / 3.0;
    } else {
        return texture(inSampler, coords);
    }
}
*/


/*/////////////////////////////////

uniform sampler2D FontSampler;  // ASCII 32x8 characters font texture unit


        const float FXS = 0.02;         // font/screen resolution ratio
        const float FYS = 0.02;         // font/screen resolution ratio

        const int TEXT_BUFFER_LENGTH = 32;
        int text[TEXT_BUFFER_LENGTH];
        int textIndex;
        vec4 colour;                    // color interface for printTextAt()

        void floatToDigits(float x) {
            float y, a;
            const float base = 10.0;

            // Handle sign
            if (x < 0.0) { 
                text[textIndex] = '-'; textIndex++; x = -x; 
            } else { 
                text[textIndex] = '+'; textIndex++; 
            }

            // Get integer (x) and fractional (y) part of number
            y = x; 
            x = floor(x); 
            y -= x;

            // Handle integer part
            int i = textIndex;  // Start of integer part
            while (textIndex < TEXT_BUFFER_LENGTH) {
                // Get last digit, scale x down by 10 (or other base)
                a = x;
                x = floor(x / base);
                a -= base * x;
                // Add last digit to text array (results in reverse order)
                text[textIndex] = int(a) + '0'; textIndex++;
                if (x <= 0.0) break;
            }
            int j = textIndex - 1;  // End of integer part

            // In-place reverse integer digits
            while (i < j) {
                int chr = text[i]; 
                text[i] = text[j];
                text[j] = chr;
                i++; j--;
            }

            text[textIndex] = '.'; textIndex++;

            // Handle fractional part
            while (textIndex < TEXT_BUFFER_LENGTH) {
                // Get first digit, scale y up by 10 (or other base)
                y *= base;
                a = floor(y);
                y -= a;
                // Add first digit to text array
                text[textIndex] = int(a) + '0'; textIndex++;
                if (y <= 0.0) break;
            }

            // Terminante string
            text[textIndex] = 0;
        }

        void printTextAt(float x0, float y0) {
            // Fragment position **in char-units**, relative to x0, y0
            float x = texCoord.x/FXS; x -= x0;
            float y = 0.5*(1.0 - texCoord.y)/FYS; y -= y0;

            // Stop if not inside bbox
            if ((x < 0.0) || (x > float(textIndex)) || (y < 0.0) || (y > 1.0)) return;
            
            int i = int(x); // Char index of this fragment in text
            x -= float(i); // Fraction into this char

            // Grab pixel from correct char texture
            i = text[i];
            x += float(int(i - ((i/16)*16)));
            y += float(int(i/16));
            x /= 16.0; y /= 16.0; // Divide by character-sheet size (in chars)

            vec4 fontPixel = texture(FontSampler, vec2(x,y));

            colour = vec4(fontPixel.rgb*fontPixel.a + colour.rgb*colour.a*(1 - fontPixel.a), 1.0);
        }

        void clearTextBuffer() {
            for (int i = 0; i < TEXT_BUFFER_LENGTH; i++) {
                text[i] = 0;
            }
            textIndex = 0;
        }

        void c(int character) {
            // Adds character to text buffer, increments index for next character
            // Short name for convenience
            text[textIndex] = character; 
            textIndex++;
        }




///////////////////////////////////*/
/*
	vec4 numToPrint = vec4(worldTime);
	// Define text to draw
    clearTextBuffer();
    c('R'); c(':'); c(' '); floatToDigits(numToPrint.r);
    printTextAt(1.0, 1.0);

    clearTextBuffer();
    c('G'); c(':'); c(' '); floatToDigits(numToPrint.g);
    printTextAt(1.0, 2.0);

    clearTextBuffer();
    c('B'); c(':'); c(' '); floatToDigits(numToPrint.b);
    printTextAt(1.0, 3.0);

    clearTextBuffer();
    c('A'); c(':'); c(' '); floatToDigits(numToPrint.a);
    printTextAt(1.0, 4.0);

    fragColor += colour;
*/

float decodeFloat7_4(uint raw) {
    uint sign = raw >> 11u;
    uint exponent = (raw >> 7u) & 15u;
    uint mantissa = 128u | (raw & 127u);
    return (float(sign) * -2.0 + 1.0) * float(mantissa) * exp2(float(exponent) - 14.0);
}

float decodeFloat6_4(uint raw) {
    uint sign = raw >> 10u;
    uint exponent = (raw >> 6u) & 15u;
    uint mantissa = 64u | (raw & 63u);
    return (float(sign) * -2.0 + 1.0) * float(mantissa) * exp2(float(exponent) - 13.0);
}

vec3 decodeColor(vec4 raw) {
    uvec4 scaled = uvec4(round(raw * 255.0));
    uint encoded = (scaled.r << 24) | (scaled.g << 16) | (scaled.b << 8) | scaled.a;

    return vec3(decodeFloat7_4(encoded >> 21), decodeFloat7_4((encoded >> 10) & 2047u), decodeFloat6_4(encoded & 1023u));
}

uint encodeFloat7_4(float val) {
    uint sign = val >= 0.0 ? 0u : 1u;
    uint exponent = uint(clamp(log2(abs(val)) + 7.0, 0.0, 15.0));
    uint mantissa = uint(abs(val) * exp2(-float(exponent) + 14.0)) & 127u;
    return (sign << 11u) | (exponent << 7u) | mantissa;
}

uint encodeFloat6_4(float val) {
    uint sign = val >= 0.0 ? 0u : 1u;
    uint exponent = uint(clamp(log2(abs(val)) + 7.0, 0.0, 15.0));
    uint mantissa = uint(abs(val) * exp2(-float(exponent) + 13.0)) & 63u;
    return (sign << 10u) | (exponent << 6u) | mantissa;
}

vec4 encodeColor(vec3 color) {
    uint r = encodeFloat7_4(color.r);
    uint g = encodeFloat7_4(color.g);
    uint b = encodeFloat6_4(color.b);

    uint encoded = (r << 21) | (g << 10) | b;
    return vec4(encoded >> 24, (encoded >> 16) & 255u, (encoded >> 8) & 255u, encoded & 255u) / 255.0;
}

vec3 toScreenSpace(vec3 p) {
    vec4 iProjDiag = vec4(gbufferProjectionInverse[0].x, gbufferProjectionInverse[1].y, gbufferProjectionInverse[2].zw);
    vec3 p3 = p * 2. - 1.;
    vec4 fragposition = iProjDiag * p3.xyzz + vec4(0, 0, -1.0, 10);
    return fragposition.xyz / fragposition.w;
}
vec3 reinhard_jodie(vec3 v) {
    float l = luma(v);
    vec3 tv = v / (1.0f + v);
    tv = mix(v / (1.0f + l), tv, tv);
    return pow(tv, vec3(1. / 2.2));
}

float decodeFloat24(vec3 raw) {
    uvec3 scaled = uvec3(raw * 255.0);
    uint sign = scaled.r >> 7;
    uint exponent = ((scaled.r >> 1u) & 63u) - 31u;
    uint mantissa = ((scaled.r & 1u) << 16u) | (scaled.g << 8u) | scaled.b;
    return (-float(sign) * 2.0 + 1.0) * (float(mantissa) / 131072.0 + 1.0) * exp2(float(exponent));
}

///////////////////

vec2 R2_samples(int n) {
    vec2 alpha = vec2(0.75487765, 0.56984026);
    return fract(alpha * n);
}
vec3 RT(vec3 dir, vec3 position, float noise, vec3 N, float transparent, vec2 lightmap, bool emissive, bool hand) {

    float ssptbias = 0.2;
    float stepSize = 99;
            #if STEPS != Unlimited
    int maxSteps = STEPS;
            #endif

    bool istranparent = transparent > 0.0;
    vec3 clipPosition = nvec3(gbufferProjection * nvec4(position)) * 0.5 + 0.5;

    float rayLength = ((position.z + dir.z * sqrt(3.0) * far) > -sqrt(3.0) * near) ? (-sqrt(3.0) * near - position.z) / dir.z : sqrt(3.0) * far;

    vec3 end = toClipSpace3(position + dir * rayLength);
    vec3 direction = end - clipPosition;  //convert to clip space

    float len = max(abs(direction.x) / oneTexel.x, abs(direction.y) / oneTexel.y) / stepSize;

                //get at which length the ray intersects with the edge of the screen
    vec3 maxLengths = (step(0., direction) - clipPosition) / direction;
    float mult = min(min(maxLengths.x, maxLengths.y), maxLengths.z);
    vec3 stepv = direction / len;
            #if STEPS == Unlimited
    int iterations = int(min(len, mult * len) - 2);
            #else	
    int iterations = min(int(min(len, mult * len) - 2), maxSteps);
            #endif

                //Do one iteration for closest texel (good contact shadows)
    vec3 spos = clipPosition + stepv / stepSize * 6.0;;

    float sp = linZ(texture2D(DiffuseDepthSampler, spos.xy).x);
    float currZ = linZ(spos.z);

    if(sp < currZ) {
        float dist = abs(sp - currZ) / currZ;

        if(dist <= 0.035)
            return vec3(spos.xy, invLinZ(sp));
    }

    spos += stepv * noise;

    for(int i = 0; i < iterations; i++) {
        if(clamp(clipPosition.xy, 0, 1) != clipPosition.xy)
            break;
                    // decode depth buffer
        float sp = linZ(texture2D(DiffuseDepthSampler, spos.xy).x);

        float currZ = linZ(spos.z);
                //	if( sp < currZ && abs(sp-ld(spos.z))/ld(spos.z) < 0.1) {
        if(sp < currZ) {
            if(spos.x < 0.0 || spos.y < 0.0 || spos.z < 0.0 || spos.x > 1.0 || spos.y > 1.0 || spos.z > 1.0)
                return vec3(1.1);
            float dist = abs(sp - currZ) / currZ;

            if(dist <= ssptbias)
                return vec3(spos.xy, invLinZ(sp));
        }
        spos += stepv;
    }

    return vec3(1.1);

}
vec3 cosineHemisphereSample(vec2 a) {
    float phi = a.y * 2.0 * 3.14159265359;
    float cosTheta = 1.0 - a.x;
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);

    return vec3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);
}
vec3 TangentToWorld(vec3 N, vec3 H) {
    vec3 UpVector = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 T = normalize(cross(UpVector, N));
    vec3 B = cross(N, T);

    return vec3((T * H.x) + (B * H.y) + (N * H.z));
}
vec3 rtGI(vec3 normal, vec3 normal2, vec4 noise, vec3 fragpos, float translucent, vec3 ambient, vec3 torch, vec3 albedo, vec2 lightmap) {
    int nrays = 4;

    vec3 intRadiance = vec3(0.0);
    float occlusion = 0.0;
    for(int i = 0; i < nrays; i++) {

        int seed = (int(Time * 100) % 40000) * nrays + i;
        vec2 ij = fract(R2_samples(seed) + noise.rg);
        vec3 rayDir = normalize(cosineHemisphereSample(ij));

        rayDir = TangentToWorld(normal, rayDir);
        rayDir = mat3(gbufferModelView) * rayDir;
        if(dot(rayDir, normal2) < 0.0)
            rayDir = -rayDir;
        vec3 rayHit = RT(rayDir, fragpos, fract(seed / 1.6180339887 + noise.b), mat3(gbufferModelView) * normal, 0, lightmap, false, false);
        vec3 previousPosition = rayHit;

        if(rayHit.z < 1.0) {

            if(previousPosition.x > 0.0 && previousPosition.y > 0.0 && previousPosition.x < 1.0 && previousPosition.x < 1.0) {

                intRadiance += ((texture(PreviousFrameSampler, previousPosition.xy).rgb)) + ambient;

                float lum = luma(intRadiance);
                vec3 diff = intRadiance - lum;
                intRadiance = (intRadiance + diff * (0.5));
            } else {
                intRadiance += ambient;
            }
            occlusion += 1.0;
        } else {
            float bounceAmount = float(rayDir.y > 0.0) + clamp(-rayDir.y * 0.1 + 0.1, 0.0, 1.0);
            vec3 sky_c = ((skyLut(rayDir, sunPosition3.xyz, rayDir.y, temporals3Sampler)) * bounceAmount) * lightmap.x;

            intRadiance += sky_c;
        }
    }
    intRadiance.rgb = (intRadiance / nrays + (1.0 - (occlusion * 0.5) / nrays) * (torch));

    return vec3(intRadiance).rgb * (1.0 - (occlusion) / nrays);

}
////////////////////////

// this code is in the public domain
vec4 textureQuadratic(in sampler2D sam, in vec2 p) {
    vec2 texSize = (textureSize(sam, 0).xy);

    p = p * texSize;
    vec2 i = floor(p);
    vec2 f = fract(p);
    p = i + f * 0.5;
    p = p / texSize;
    f = f * f * (3.0 - 2.0 * f); // optional for extra sweet
    vec2 w = 0.5 / texSize;
    return mix(mix(texture(sam, p + vec2(0, 0)), texture(sam, p + vec2(w.x, 0)), f.x), mix(texture(sam, p + vec2(0, w.y)), texture(sam, p + vec2(w.x, w.y)), f.x), f.y);

}

// avoid hardware interpolation
vec4 sample_biquadratic_exact(sampler2D channel, vec2 uv) {
    vec2 res = (textureSize(channel, 0).xy);
    vec2 q = fract(uv * res);
    ivec2 t = ivec2(uv * res);
    const ivec3 e = ivec3(-1, 0, 1);
    vec4 s00 = texelFetch(channel, t + e.xx, 0);
    vec4 s01 = texelFetch(channel, t + e.xy, 0);
    vec4 s02 = texelFetch(channel, t + e.xz, 0);
    vec4 s12 = texelFetch(channel, t + e.yz, 0);
    vec4 s11 = texelFetch(channel, t + e.yy, 0);
    vec4 s10 = texelFetch(channel, t + e.yx, 0);
    vec4 s20 = texelFetch(channel, t + e.zx, 0);
    vec4 s21 = texelFetch(channel, t + e.zy, 0);
    vec4 s22 = texelFetch(channel, t + e.zz, 0);
    vec2 q0 = (q + 1.0) / 2.0;
    vec2 q1 = q / 2.0;
    vec4 x0 = mix(mix(s00, s01, q0.y), mix(s01, s02, q1.y), q.y);
    vec4 x1 = mix(mix(s10, s11, q0.y), mix(s11, s12, q1.y), q.y);
    vec4 x2 = mix(mix(s20, s21, q0.y), mix(s21, s22, q1.y), q.y);
    return mix(mix(x0, x1, q0.x), mix(x1, x2, q1.x), q.x);
}


vec4 smoothfilter(in sampler2D tex, in vec2 uv) {
    vec2 textureResolution = (textureSize(tex, 0).xy);
    uv = uv * textureResolution + 0.5;
    vec2 iuv = floor(uv);
    vec2 fuv = fract(uv);
    uv = iuv + fuv * fuv * fuv * (fuv * (fuv * 6.0 - 15.0) + 10.0);
    uv = (uv - 0.5) / textureResolution;
    return texture(tex, uv);
}


vec3 reinhard_jodie(vec3 v) {
    float l = luma(v);
    vec3 tv = v / (1.0f + v);
    tv = mix(v / (1.0f + l), tv, tv);
    return pow(tv, vec3(1. / 2.2));
}

float decodeFloat24(vec3 raw) {
    uvec3 scaled = uvec3(raw * 255.0);
    uint sign = scaled.r >> 7;
    uint exponent = ((scaled.r >> 1u) & 63u) - 31u;
    uint mantissa = ((scaled.r & 1u) << 16u) | (scaled.g << 8u) | scaled.b;
    return (-float(sign) * 2.0 + 1.0) * (float(mantissa) / 131072.0 + 1.0) * exp2(float(exponent));
}

            //ambientLight.rgb = rtGI(normal,normal3, vec4(noise), viewPos,0, ambientLight,vec3(1.0)*lmy, OutTexel.rgb,vec2(lmx,lmy));  
